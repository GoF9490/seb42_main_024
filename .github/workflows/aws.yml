# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository. 
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.


# 이 워크플로우는 새 컨테이너 이미지를 빌드하고 Amazon ECR에 푸시합니다,
# 그런 다음 "메인" 지점에 푸시가 있을 때 새 작업 정의를 Amazon ECS에 배포합니다.
#
# 이 워크플로우를 사용하려면 다음 설정 단계를 완료해야 합니다:
#
# 1. 이미지를 저장할 ECR 저장소를 만듭니다.
# 예를 들어 'awesec create-repository --repository-name my-ecr-repo --region us-east-2'입니다.
# 아래 워크플로우의 'ECR_REPOSITORY' 환경 변수 값을 리포지토리 이름으로 바꿉니다.
# 아래 워크플로우의 'AWS_REGION' 환경 변수 값을 저장소의 영역으로 바꿉니다.
#
# 2. ECS 작업 정의, ECS 클러스터 및 ECS 서비스를 생성합니다.
# 예를 들어 ECS 콘솔의 시작 가이드를 따릅니다:
# https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/first Run
# 아래 워크플로우의 'ECS_SERVICE' 환경 변수 값을 Amazon ECS 서비스에 대해 설정한 이름으로 바꿉니다.
# 아래 워크플로의 'ECS_CLUSTER' 환경 변수 값을 클러스터에 대해 설정한 이름으로 바꿉니다.
#
# 3. 저장소에 ECS 작업 정의를 JSON 파일로 저장합니다.
# 형식은 "awsecs register-task-definition --generate-cli-skeleton"의 출력을 따라야 합니다.
# 'ECS_'의 값을 바꿉니다아래 워크플로우의 TASK_DEFINITION' 환경 변수(JSON 파일의 경로 포함).
# 아래 워크플로우의 'CONTRANE_NAME' 환경 변수 값을 컨테이너 이름으로 바꿉니다.
# 작업 정의의 '컨테이너 정의' 섹션에 있습니다.
#
# 4. IAM 사용자 액세스 키를 'AWS_ACCESS_KEY_'라는 GitHub Actions 암호에 저장합니다 'ID' 및 'AWS_SECRET_ACCESS_KEY'입니다.
# 이 IAM 사용자에게 권장되는 IAM 정책과 액세스 키 자격 증명 처리에 대한 모범 사례는 아래의 각 작업에 대한 설명서를 참조하십시오.


name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
